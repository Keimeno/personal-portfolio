import TProject from '@/types/ProjectType';

const componentsLibrary = {
  description: 'The components library of the Luminu Project',
  background:
    'Implements all reused components, such as\nButtons, Notification Cards, Tabs, Cards, Alerts, Layout Items, etc.\nThis featurerich library is used in all Luminu Projects.',
  hasLivePreview: false,
  hasSourceCode: true,
  sourceCode: 'https://github.com/LuminuNET/components-library',
  screenshots: [],
  hasReadme: true,
  readme:
    "# @luminu/components\n\n## Setup\n\n- npm run serve\n\n## Deployment\n\n- npm login --scope=@luminu --registry=http://repo.luminu.net/repository/luminu-node/\n- npm run build\n- npm publish\n\n## Documentation\n\n### Button\n\n#### Props\n\n| Name     | required/default | type    | description                             |\n| :------- | :--------------- | :------ | :-------------------------------------- |\n| text     | true             | String  | Sets the button's text                  |\n| size     | false / normal   | String  | Sets the button's size (small, big)     |\n| type     | false / normal   | String  | Sets the button's type (success, error) |\n| disabled | false / false    | Boolean | Sets the button's disabled state        |\n\n### Seperator\n\n#### Props\n\n| Name    | required/default | type   | description                             |\n| :------ | :--------------- | :----- | :-------------------------------------- |\n| mtop    | false / 5        | Number | Sets the top margin of the seperator    |\n| mbottom | false / 5        | Number | Sets the bottom margin of the seperator |\n\n### Notification\n\n#### Props\n\n| Name     | required/default | type   | description                                                                 |\n| :------- | :--------------- | :----- | :-------------------------------------------------------------------------- |\n| message  | true             | String | Sets the message that will be displayed                                     |\n| activity | false / 0        | Number | Sets it's activity state (Increment to activate/set to negative to disable) |\n| timeout  | false / 2500     | Number | Sets the timeout when it should fade out again                              |\n| fontSize | false / 24       | Number | Sets the font size for the notification message                             |\n\n### Card\n\n#### Props\n\n| Name      | required/default | type    | description                   |\n| :-------- | :--------------- | :------ | :---------------------------- |\n| highlight | false / false    | Boolean | Marks the card as highlighted |\n\n### Loader\n\n#### Props\n\n| Name          | required/default | type    | description                                                                   |\n| :------------ | :--------------- | :------ | :---------------------------------------------------------------------------- |\n| mtop          | false / 0        | Number  | Sets the top margin of the loader                                             |\n| mbottom       | false / 0        | Number  | Sets the bottom margin of the loader                                          |\n| justifyCenter | false / false    | Boolean | Declares whether the loader should be aligned to the horizontal middle or not |\n| size          | false / 24       | Number  | Sets the size of the loader                                                   |\n\n### Alert\n\n#### Published Events\n\n| Name              | data   | type                                                   |\n| :---------------- | :----- | :----------------------------------------------------- |\n| LM_ALERT_RESPONSE | status | { isSuccess: boolean, message: string, title: string } |\n\n### StickyHeader\n\n#### Props\n\n| Name              | required/default       | type         | description                                                        |\n| :---------------- | :--------------------- | :----------- | :----------------------------------------------------------------- |\n| links             | true                   | Array(TLink) | Sets the displayed links                                           |\n| active            | false / -1             | Number       | Sets which dropdown is pressed                                     |\n| type              | false / 'defaultLogin' | String       | Sets the login type                                                |\n| username          | false / \"\"             | String       | Sets the displayed username                                        |\n| userId            | false / -1             | Number       | Sets the user id                                                   |\n| hasAvatar         | false / false          | Boolean      | If a user has an avatar his personal avatar will be displayed      |\n| notLoggedInAction | false / {}             | Any          | Sets login action (View integration test for implementation)       |\n| dropdownItems     | false / []             | Array        | Sets the dropdown items (View integration test for implementation) |\n\n### Footer\n\n#### Props\n\n| Name     | required/default | type             | description                          |\n| :------- | :--------------- | :--------------- | :----------------------------------- |\n| partners | true             | Array(TPartners) | Sets the actively displayed partners |\n\n### Tabs\n\n#### Props\n\n| Name   | required/default | type          | description                         |\n| :----- | :--------------- | :------------ | :---------------------------------- |\n| tabs   | true             | Array(string) | Sets the name of the displayed tabs |\n| active | false / 0        | number        | Sets the currently active tab       |\n\n#### Published Events\n\n| Name           | data  | type   |\n| :------------- | :---- | :----- |\n| LM_CHANGED_TAB | index | number |\n",
} as TProject;

export default componentsLibrary;
